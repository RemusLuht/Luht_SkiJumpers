@model Luht_SkiJumpers.Models.Jumpers

@{
    ViewData["Title"] = "AddJumpers";
}
<h4>Add a new Jumper</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="AddJumper" method="post" id="addJumperForm">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Id" class="control-label"></label>
                <input asp-for="Id" class="form-control" readonly />
                <span asp-validation-for="Id" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" id="nameInput" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" id="submitButton" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="JumpersList">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        // Move the ID input field declaration outside the generateId() function
        var form = document.getElementById("addJumperForm");
        var nameInput = form.elements["Name"];
        var idInput = form.elements["Id"];

        // Check if the ID input field is empty before generating an ID
        if (idInput.value.trim() === "") {
            generateId();
        }

        form.onsubmit = function () {
            var name = nameInput.value;
            if (!isNaN(name)) {
                alert("Name cannot be a number.");
                return false; // Prevent form submission
            }
        };

        function generateId() {
            // Get the last generated ID from local storage
            var lastId = localStorage.getItem("lastId");
            var newId;

            if (lastId) {
                // Increment the last generated ID by 1
                newId = parseInt(lastId) + 1;
            } else {
                // If no last ID found, start with 1
                newId = 1;
            }

            // Store the new ID in local storage for future use
            localStorage.setItem("lastId", newId);

            // Fill the ID input field with the generated ID
            idInput.value = newId.toString();
        }
    </script>
}
